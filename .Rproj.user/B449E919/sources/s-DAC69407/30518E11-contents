

server <- function(input, output, session) {
      

      
      
      # spotify_df <- callModule(add_artist, "test")
      
      
      # spotify_df <- callModule(add_artist, "add")
      spotify_df <- callModule(add_artist, "add")
      
      model_run <- readRDS("logistic_regression_chill_run")
      
      # spotify_df <- reactive(data.frame())
      
#       spotify_df <- reactiveValues(df = structure(list(danceability = numeric(0), energy = numeric(0), 
#                                            key = numeric(0), loudness = numeric(0), mode = numeric(0), 
#                                            speechiness = numeric(0), acousticness = numeric(0), instrumentalness = numeric(0), 
#                                            liveness = numeric(0), valence = numeric(0), tempo = numeric(0), 
#                                            track_uri = character(0), duration_ms = numeric(0), time_signature = numeric(0), 
#                                            album_uri = character(0), track_number = numeric(0), track_name = character(0), 
#                                            album_name = character(0), album_img = character(0), album_release_date = character(0), 
#                                            album_release_year = numeric(0), artist_img = character(0)), .Names = c("danceability", 
#                                                                                                                    "energy", "key", "loudness", "mode", "speechiness", "acousticness", 
#                                                                                                                    "instrumentalness", "liveness", "valence", "tempo", "track_uri", 
#                                                                                                                    "duration_ms", "time_signature", "album_uri", "track_number", 
#                                                                                                                    "track_name", "album_name", "album_img", "album_release_date", 
#                                                                                                                    "album_release_year", "artist_img"), row.names = integer(0), class = "data.frame"))
#       
      
#       spotify_df <- callModule(add_artist, "test2", spotify_df)
#       
#       observe({
#             validate(need(temp(), F))
#             isolate({
#                   spotify_df$df <- rbind(temp(), spotify_df$df)
#                   print(spotify_df$df)
#             })
#       })
#       
      observeEvent(input$btn_tab_play, {
            updateTabItems(session, "tabs", "pag1")
      })
      
      observeEvent(input$btn_tab_exp, {
            updateTabItems(session, "tabs", "pag2")
      })
      
      
      output$danceability <- renderHighchart({
            validate(need(spotify_df$df, message = FALSE))
            isolate({
                  if(nrow(spotify_df$df)>0) {
                        temp = data.frame(artist_name = spotify_df$df$artist_name[order(spotify_df$df$artist_name)] %>% unique(), stringsAsFactors = F)
                        levels = temp$artist_name
                        temp$color = rep(brewer.pal(8, name = "Set2"), length.out = nrow(temp))
                        temp = merge(spotify_df$df, temp, by = "artist_name")
                        temp$artist_name = factor(temp$artist_name, levels = levels)
                        
                        x <- c("Song", "Album", "Danceability", "Energy")
                        y <-  c(sprintf("{point.%s}", c("track_name", "album_name")), sprintf("{point.%s:.2f}", c("danceability", "energy")))
                        tltip <- tooltip_table(x, y)
                        
                        
                        hchart(temp, "scatter", hcaes(album_name, danceability, color = color, group = album_name)) %>%
                              hc_title(text = "Best songs to listen while running") %>%
                              hc_xAxis(title = list(text = "Album")) %>%
                              hc_yAxis(max = 1, title = list(text = "Encourage Index")) %>% 
                              hc_tooltip(useHTML = TRUE, headerFormat = "", pointFormat = tltip)
                  }
            })
      })
      
      
      output$energy <- renderHighchart({
            validate(need(spotify_df$df, message = FALSE))
            isolate({
                  if(nrow(spotify_df$df)>0) {
                        temp = data.frame(artist_name = spotify_df$df$artist_name[order(spotify_df$df$artist_name)] %>% unique(), stringsAsFactors = F)
                        levels = temp$artist_name
                        temp$color = rep(brewer.pal(8, name = "Set2"), length.out = nrow(temp))
                        temp = merge(spotify_df$df, temp, by = "artist_name")
                        temp$artist_name = factor(temp$artist_name, levels = levels)
                        
                        x <- c("Song", "Album", "Danceability", "Energy")
                        y <-  c(sprintf("{point.%s}", c("track_name", "album_name")), sprintf("{point.%s:.2f}", c("danceability", "energy")))
                        tltip <- tooltip_table(x, y)
                        
                        
                        hchart(temp, "scatter", hcaes(album_name, energy, color = color, group = album_name)) %>%
                              hc_title(text = "Best songs to listen while running") %>%
                              hc_xAxis(title = list(text = "Album")) %>%
                              hc_yAxis(max = 1, title = list(text = "Encourage Index")) %>% 
                              hc_tooltip(useHTML = TRUE, headerFormat = "", pointFormat = tltip)
                  }
            })
      })
      
      
      output$energy_vs_danceability <- renderHighchart({
            validate(need(spotify_df$df, message = FALSE))
            isolate({
                  if(nrow(spotify_df$df)>0) {
                        temp = data.frame(artist_name = spotify_df$df$artist_name[order(spotify_df$df$artist_name)] %>% unique(), stringsAsFactors = F)
                        levels = temp$artist_name
                        temp$color = rep(brewer.pal(8, name = "Set2"), length.out = nrow(temp))
                        temp = merge(spotify_df$df, temp, by = "artist_name")
                        temp$artist_name = factor(temp$artist_name, levels = levels)
                        
                        x <- c("Song", "Album", "Danceability", "Energy")
                        y <-  c(sprintf("{point.%s}", c("track_name", "album_name")), sprintf("{point.%s:.2f}", c("danceability", "energy")))
                        tltip <- tooltip_table(x, y)
                        
                        
                        hchart(temp, "scatter", hcaes(danceability, energy, color = color)) %>%
                              hc_title(text = "Best songs to listen while running") %>%
                              hc_xAxis(title = list(text = "Album")) %>%
                              hc_yAxis(max = 1, title = list(text = "Encourage Index")) %>% 
                              hc_tooltip(useHTML = TRUE, headerFormat = "", pointFormat = tltip)
                  }
            })
      })
      
      output$similar_table <- renderDataTable({
            validate(need(spotify_df$df, message = FALSE))
            if(nrow(spotify_df$df)>0) {
                  features = c('danceability', 'energy', 'key', 'loudness', 'mode', 'speechiness', 'acousticness','instrumentalness', 'liveness', 'valence', 'tempo', 'time_signature')
                  x = spotify_df$df
                  x = x[,features]
                  x = predict(preProcess(x, method = c("center", "scale")), x)
                  dd = dist(x)
                  dd = as.matrix(dd)
                  dd = melt(dd)
                  dd = dd %>% filter(Var1>Var2)
                  dd$track_1 = spotify_df$df[dd$Var1,]$track_name
                  dd$album_1 = spotify_df$df[dd$Var1,]$album_name
                  dd$track_2 = spotify_df$df[dd$Var2,]$track_name
                  dd$album_2 = spotify_df$df[dd$Var2,]$album_name
                  dd$Var1 = NULL
                  dd$Var2 = NULL
                  dd = dd %>% arrange(value)
                  names(dd) = c("Songs distance", "Track 1", "Album 1", "Track 2", "Album 2")
                  dd$`Songs distance` = sprintf("%.2f", dd$`Songs distance`) %>% as.numeric()
                  data.table(dd)
                  # formattable(dd, list(area(col = "Indice de diferenca") ~ normalize_bar("pink", 0.2)))
            }
            
      })
      
      
      output$best_to_run <- renderDataTable({
            validate(need(spotify_df$df, message = FALSE))
            if(nrow(spotify_df$df)>0) {
                  features = c('danceability', 'energy', 'key', 'loudness', 'mode', 'speechiness', 'acousticness','instrumentalness', 'liveness', 'valence', 'tempo', 'time_signature')
                  run_index = sprintf("%.2f", predict(model_run, spotify_df$df, type = "prob")[,2]) %>% as.numeric()
                  temp = cbind(spotify_df$df, run_index = run_index)
                  temp %>% 
                        mutate(runnability = danceability*energy) %>%
                        arrange(desc(run_index)) %>%
                        select(run_index, track_name, album_name, artist_name) %>%
                        data.table()
            }
            
      })
      
      
      output$playlist_to_run <- renderDataTable({
            validate(need(spotify_df$df, message = FALSE))
            if(nrow(spotify_df$df)>0) {
                  features = c('danceability', 'energy', 'key', 'loudness', 'mode', 'speechiness', 'acousticness','instrumentalness', 'liveness', 'valence', 'tempo', 'time_signature')
                  run_index = sprintf("%.2f", predict(model_run, spotify_df$df, type = "prob")[,2]) %>% as.numeric()
                  temp = cbind(spotify_df$df, run_index = run_index)
                  temp = temp[temp$run_index > 0.87,]
                  temp %>% 
                        arrange(desc(run_index)) %>%
                        select(track_name, album_name, artist_name) %>%
                        data.table()
            }
            
      })
      
      
      
      output$playlist_to_relax <- renderDataTable({
            validate(need(spotify_df$df, message = FALSE))
            if(nrow(spotify_df$df)>0) {
                  features = c('danceability', 'energy', 'key', 'loudness', 'mode', 'speechiness', 'acousticness','instrumentalness', 'liveness', 'valence', 'tempo', 'time_signature')
                  run_index = sprintf("%.2f", predict(model_run, spotify_df$df, type = "prob")[,2]) %>% as.numeric()
                  temp = cbind(spotify_df$df, run_index = run_index)
                  temp = temp[temp$run_index < 0.20,]
                  temp %>% 
                        arrange(run_index) %>%
                        select(track_name, album_name, artist_name) %>%
                        data.table()
            }
            
      })
      
      
      output$plot_2dpca <- renderHighchart({
            validate(need(spotify_df$df, message = FALSE))
            
            # withProgress(message = "Plotting...", value = 0, {
            if(nrow(spotify_df$df)>0) {
                  features = c("danceability", "energy", "loudness", "speechiness", "acousticness", "instrumentalness", "liveness", "valence", "tempo")
                  
                  pca = prcomp(spotify_df$df[,features], scale = T)
                  
                  
                  var_explained = sum((pca$sdev^2)[1:2])/sum(pca$sdev^2)
                  
                  rotation = pca$rotation %>% data.frame
                  
                  rotation$names = row.names(pca$rotation)
                  
                  df_plot = cbind(pca$x, spotify_df$df[,c("artist_name", "track_name", "album_name", "album_release_date", "album_img")])
                  
                  
                  pcs = rotation %>%
                        rownames_to_column("name") %>%
                        select(PC1, PC2, name) %>%
                        mutate(PC1 = 10*PC1, PC2 = 10*PC2) %>%
                        group_by(name) %>%
                        do(data = list(c(0,0), c(.$PC1, .$PC2)), marker = list(enabled = F), showInLegend = F, tooltip = "") %>%
                        list_parse()
                  
                  
                  pcs_labels = rotation %>%
                        rownames_to_column("name") %>%
                        select(PC1, PC2, name) %>%
                        mutate(PC1 = 10*PC1, PC2 = 10*PC2) %>%
                        group_by(name) %>%
                        do(label = .$name, data = list(c(.$PC1, .$PC2)), dataLabels = list(enabled = T, format = '{series.name}'), marker = list(symbol = "diamond"), showInLegend = F, tooltip = "") %>%
                        list_parse()
                  
                  
                  
                  
                  
                  df_plot = df_plot %>%
                        # rowwise() %>%
                        mutate(tooltip = paste0('<a style = "margin-right:', max(max(nchar(track_name), nchar(album_name)) * 7, 55), 'px">', # dynamic sizing
                                                '<b>Album:</b> ', album_name,
                                                '<br><b>Track:</b> ', track_name))
                  
                  grouped_by = ifelse(n_distinct(df_plot$artist_name)>1, "artist_name", "album_name")
                  
                  names(df_plot)[names(df_plot) == grouped_by] = "grouped_by"
                  
                  set.seed(10)
                  pal <- sample(brewer.pal(12, 'Paired'), n_distinct(spotify_df$df[grouped_by]), replace = T)
                  
                  
                  
                  
                  hchart(df_plot, "scatter", hcaes(PC1, PC2, group = grouped_by)) %>%
                        hc_add_series_list(pcs_labels) %>%
                        hc_add_series_list(pcs) %>%
                        hc_colors(color = c(pal, rep('white', 2*nrow(rotation)))) %>%
                        hc_tooltip(formatter = JS(paste0("function() {return this.point.tooltip;}")))
            }
            # })
            
      })
      
      output$plot_3dpca <- renderPlotly({
            validate(need(spotify_df$df, message = FALSE))
            if(nrow(spotify_df$df)>0) {
                  
                  features = c("danceability", "energy", "loudness", "speechiness", "acousticness", "instrumentalness", "liveness", "valence", "tempo")
                  
                  pca = prcomp(spotify_df$df[,features], scale = T)
                  
                  var_explained = sum((pca$sdev^2)[1:2])/sum(pca$sdev^2)
                  
                  rotation = pca$rotation %>% data.frame  %>% select(PC1, PC2, PC3)
                  rotation$names = row.names(rotation)
                  
                  df_plot = cbind(pca$x, spotify_df$df[,c("track_name", "album_name", "album_release_date", "album_img", "artist_name")])
                  
                  rotation2 = apply(rotation[,c("PC1", "PC2", "PC3", "names")], 2, function(x) rbind(c(0), x, c(NA))) %>% data.frame(stringsAsFactors = F)
                  rotation2[which(rotation2$PC1==0),]$names = NA
                  rotation2$PC1 = as.numeric(rotation2$PC1)
                  rotation2$PC2 = as.numeric(rotation2$PC2)
                  rotation2$PC3 = as.numeric(rotation2$PC3)
                  
                  library(caret)
                  # df_plot[,c("PC1", "PC2", "PC3")] = df_plot[,c("PC1", "PC2", "PC3")] %>% apply(2, function(x) (x - mean(x))/(max(x) - min(x)))
                  
                  df_plot[,c("PC1", "PC2", "PC3")] = df_plot[,c("PC1", "PC2", "PC3")]/max(df_plot[,c("PC1", "PC2", "PC3")])
                  
                  grouped_by = ifelse(n_distinct(df_plot$artist_name)>1, "artist_name", "album_name")
                  
                  names(df_plot)[names(df_plot) == grouped_by] = "grouped_by"
                  
                  set.seed(10)
                  pal <- sample(brewer.pal(12, 'Paired'), n_distinct(spotify_df$df[grouped_by]), replace = T)
                  
                  
                  plot_ly(df_plot, x = ~PC1, y = ~PC2, z = ~PC3, color = ~grouped_by, colors = pal, text = ~paste("<b>Song:</b>", track_name)) %>%
                        add_markers() %>%
                        layout(scene = list(xaxis = list(title = 'PC1'),
                                            yaxis = list(title = 'PC2'),
                                            zaxis = list(title = 'PC3')),
                               legend = list(x = 0.5, y = 0, orientation = "h")) %>%
                        add_trace(data = rotation2, x = ~PC1, y = ~PC2, z = ~PC3, color = "Components", text = ~paste("<b>Component:</b>", names), line = list(color = "#FFFFFF"), text = NULL, type = 'scatter3d', mode = "lines", width = 2) %>% 
                        layout(paper_bgcolor='transparent')
            }
      })
      
      output$plot_features <- renderUI({
            validate(need(spotify_df$df, message = FALSE))
            if(nrow(spotify_df$df)>0) {
                  progress <- shiny::Progress$new()
                  progress$set(message = "Computing data", value = 0)
                  # Close the progress when this reactive exits (even if there's an error)
                  on.exit(progress$close())
                  i=1
                  features = c("danceability", "energy", "loudness", "speechiness", "acousticness", 
                               "instrumentalness", "liveness", "valence", "tempo")
                  map(features, function(x){
                        progress$inc(1/i, detail = paste("Doing part", i))
                        i = i+1
                        spotify_df$df[[x]] %>% 
                              hchart(showInLegend = FALSE) %>% 
                              hc_add_theme(hc_theme_smpl()) %>% 
                              hc_title(text = x) %>% 
                              hc_yAxis(title = list(text = ""))
                  }) %>% 
                        hw_grid(rowheight = 150, ncol = 9) # %>% browsable(value = F)
            }
            
            
      })
      
      output$data_exp <- renderUI({
            validate(need(spotify_df$df, message = "Please, pick at least one artist."))
            if(nrow(spotify_df$df)>0) {
                  tagList(
                        fluidRow(box(htmlOutput("plot_features"), width = 12)),
                        fluidRow(
                              box(  title = "Most similar songs",
                                    div(style = 'height: 670px; overflow-y: auto; overflow-x: auto', dataTableOutput("similar_table")),
                                    width = 4, height = 710
                              ),
                              
                              tabBox(title = "Principal Components Analysis",
                                     tabPanel("2D", {
                                           highchartOutput("plot_2dpca", height = 670)
                                     }),
                                     tabPanel("3D", plotlyOutput("plot_3dpca", height = "670px", width = "100%")),
                                     #                                     highchartOutput("energy", height = 680),
                                     #                                     highchartOutput("energy_vs_danceability", height = 680),
                                     width = 8,
                                     height = 710)#,
                              #                               box(
                              #                                     htmlOutput("plot_features"),
                              #                               width = 2)
                        ),
                        fluidRow(
                              #                                 box(
                              #                                       div(style = 'height: 450px; overflow-y: auto; overflow-x: auto', dataTableOutput("table")),
                              #                                       width = 4
                              #                                 )
                        )
                  )
            } else {
                  tags$div(class = "no-artist-chosen", print("Please, pick at least one artist."))
            }
      })
      
}